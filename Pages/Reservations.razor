@page "/reservations"
@using FrontendApp.Models
@using FrontendApp.Services
@inject ApiService ApiService
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<h3>Mes Réservations</h3>

@if (reservations == null || !reservations.Any())
{
    <p>Aucune réservation pour le moment.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Menu</th>
                <th>Quantité</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var res in reservations)
            {
                <tr>
                    <td>@res.ReservationDate.ToShortDateString()</td>
                    <td>@res.MenuId</td>
                    <td>@res.Status</td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => AnnulerReservation(res)">
                            Annuler
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<h4>Nouvelle Réservation</h4>
<div class="form-new-res">
    <button class="btn btn-primary" @onclick="AllerVersMenu">
        Nouvelle réservation
    </button>
</div>

@if (!string.IsNullOrEmpty(message))
{
    <p style="color: green;">@message</p>
}

@code {
    private List<ReservationDto> reservations = new();
    private ReservationCreateDTO newReservation = new() 
    {
        UserId = "default-user-id"
    };
    private string? message;

    protected override async Task OnInitializedAsync()
    {
        reservations = await ApiService.GetReservationsAsync();
    }

    private async Task CreateReservation()
    {
        newReservation.ReservationDate = DateTime.Now;

        var userId = await JS.InvokeAsync<string>("localStorage.getItem", "user_id");
        newReservation.UserId = userId ?? "default-user-id";

        var created = await ApiService.CreateReservationAsync(newReservation);
        if (created != null)
        {
            message = "Réservation ajoutée avec succès !";
            reservations = await ApiService.GetReservationsAsync();
            newReservation = new() { UserId = userId ?? "default-user-id" };
        }
        else
        {
            message = "Erreur lors de la réservation.";
        }
    }

   private async Task AnnulerReservation(ReservationDto reservation)
    {
        if (reservation == null)
        {
            message = "❌ Erreur : Réservation invalide.";
            return;
        }

        bool confirmed = await JS.InvokeAsync<bool>("confirm", $"Êtes-vous sûr de vouloir annuler la réservation du {reservation.ReservationDate.ToShortDateString()} (ID: {reservation.Id}) ?");

        if (confirmed)
        {
            bool success = await ApiService.DeleteReservationAsync(reservation.Id);

            if (success)
            {
                message = "✅ Réservation annulée avec succès.";
                reservations.Remove(reservation); 
            }
            else
            {
                message = "❌ Échec de l'annulation de la réservation. Veuillez réessayer.";
            }
        }
        else
        {
            message = "Annulation de la réservation annulée par l'utilisateur.";
        }
    }

    private void AllerVersMenu()
    {
        NavigationManager.NavigateTo("/menus");
    }
}

<style>
    .table {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 20px;
    }

    .table th,
    .table td {
        padding: 10px;
        border: 1px solid #ccc;
        text-align: left;
    }

    .btn {
        padding: 6px 12px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
    }

    .btn-danger {
        background-color: #dc3545;
        color: white;
    }

    .btn-primary:hover {
        background-color: #0056b3;
    }

    .btn-danger:hover {
        background-color: #c82333;
    }

    .form-new-res input {
        margin: 0 10px 10px 0;
        padding: 8px;
        border-radius: 4px;
        border: 1px solid #ccc;
    }

    .form-new-res {
        margin-top: 20px;
    }
</style>
